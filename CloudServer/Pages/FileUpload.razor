@page "/file-upload"
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using System.Diagnostics
@using CloudServer.Logic
@using CloudServer.Components
@inject IWebHostEnvironment Environment

<h3>Upload Files</h3>

<p>
    <label>
        Upload up to @FileUploader.Settings.MaxAllowedFiles of up to @FileUploader.Settings.MaxFileSizeBytes bytes:
        <InputFile OnChange="@LoadFiles" multiple/>
    </label>
</p>


@if (_loadingFiles == null) {
    <p>Select some files to upload.</p>
}
else {
    <ol>
        @foreach (var file in _loadingFiles) {
            <UploadingFile LoadFile="@file"/>
        }
    </ol>
}

@if (_uploadingTimeSeconds > 0) {
    <p>File uploading took: @($"{_uploadingTimeSeconds:F2}") seconds.</p>
}

@code {
    private string? _uploadDirectory;
    private string UploadDirectory => _uploadDirectory ??= Path.Combine(Environment.WebRootPath, "unsafe-uploads");
    private LoadFile[]? _loadingFiles;
        private const int ProgressRefreshRate = 100;

    // Statistics
    private double _uploadingTimeSeconds;

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        _uploadingTimeSeconds = 0;
        var sw = Stopwatch.StartNew();

        Directory.CreateDirectory(UploadDirectory);

        _loadingFiles = e
            .GetMultipleFiles(FileUploader.Settings.MaxAllowedFiles)
            .Select(file => new LoadFile(file))
            .ToArray();

        var fileTasks = new Task[_loadingFiles.Length + 1];
        fileTasks[_loadingFiles.Length] = Refresh();
        for (var i = 0; i < _loadingFiles.Length; i++) {
            fileTasks[i] = FileUploader.UploadFileAsync(_loadingFiles[i], UploadDirectory);
        }

        await Task.WhenAll(fileTasks);

        sw.Stop();
        _uploadingTimeSeconds = sw.Elapsed.TotalSeconds;
    }

    private async Task Refresh() {
        while (_loadingFiles?.Any(file => file.Status is FileUploadStatus.Uploading or FileUploadStatus.None) ?? false) {
            await Task.Delay(ProgressRefreshRate);
            await InvokeAsync(StateHasChanged);
        }
    }

}